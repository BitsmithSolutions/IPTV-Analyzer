
= Howto Compile =

This is a quick howto, on getting the iptables module compiled.
Including howto install an newer/compatible iptables version.

I'm using GNU tool 'stow' to handle my out-of-distro installed
software.  To follow these compile instructions, you should have stow
installed on your machine.


== Compiling and installing iptables v1.4.3.2 ==

This iptables module requires minimum iptables 1.4.3.

Download iptables tar-ball:

  cd ~/download/
  wget http://www.netfilter.org/projects/iptables/files/iptables-1.4.3.2.tar.bz2

Unpack the source

  cd ~/tools/
  tar jxvf ~/download/iptables-1.4.3.2.tar.bz2
  cd iptables-1.4.3.2/

Note, when compiling iptables set 'prefix=/usr/local/' and then when
installing the prefix should be redefined to the stow path.

  ./configure --prefix=/usr/local/
  make

Due to stow, install iptables in /usr/local/stow/iptables-1.4.3.2, by
redefining "prefix".

  make prefix=/usr/local/stow/iptables-1.4.3.2 install

Activate the software via stow:

  cd /usr/local/stow/
  stow iptables-1.4.3.2

Check the version
 /usr/local/sbin/iptables -V


== Developement tree ==

Get the development git development tree here:
(FIXME: Move this to the new domain iptv-analyzer.org)

 git clone git://people.netfilter.org/hawk/iptv-analyzer.git


=== Compiling the kernel module ===

No patching of the Linux kernel is required, but the kernel source is
required.  The module takes advantage of the kernel build/make system.

Minimum kernel version required is 2.6.28 (due to some RCU changes).

The makefile tries to detect the kernel source via the symlink in:

 /lib/modules/2.6.xx/build

The kernel version is extracted by calling 'uname -r' in the makefile.

But its also possibly to compile against another kernel than the
current running version, by calling:

 make KERNEL_DIR=~/git/kernel/davem/net-next-2.6/

If you have a fresh kernel source you might need to call:

 make oldconfig
 make prepare

TODO/Issue?: Is it possible to link against a fresh source? As the
module needs to know the C "extern" adresses.

Another trick, 64-bit vs 32-bit kernel.  The current Makefile assumes
you want to compile against a 64-bit kernel. This is due to the
ARCH=x86_64 define. To compile against a 32-bit version just call:

 make ARCH=x86


== Reloading kernel module ==

Remember to manually rmmod and insmod the kernel module it self.

  rmmod xt_mp2t
  insmod ./xt_mp2t.ko


== Trick: Fake stow install ==

Make a fake stow software package for the development version of the
source.

Create directory:

  mkdir /usr/local/stow/mp2t_development_fake/

And create the directories libexec/xtables/ within.

  mkdir -p /usr/local/stow/mp2t_development_fake/libexec/xtables/
  cd       /usr/local/stow/mp2t_development_fake/libexec/xtables/

Create a symlink from this directory to your development edition of
the file 'libxt_mp2t.so'

  ln -s ~/git/iptv-analyzer/iptables-module/libxt_mp2t.so .

Or the 'libxt_mp2t.so' installed in '/lib/modules/xt_mp2t' (by the
remote-install.sh script).

  ln -s /lib/modules/xt_mp2t/libxt_mp2t.so \
        /usr/local/stow/mp2t_development_fake/libexec/xtables/

Install (linkin) the stow software package 'mp2t_development_fake'.

 cd /usr/local/stow
 stow mp2t_development_fake

